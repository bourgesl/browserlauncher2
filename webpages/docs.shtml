<!-- $Id: docs.shtml,v 1.6 2006/04/18 19:46:29 jchapman0 Exp $ -->
<html>
<head>
	<title>BrowserLauncher2 Documentation Page</title>
    <link rel="stylesheet" href="browserlauncherweb.css" type="text/css">
</head>
<body bgcolor="#ffffff">
<table border="0" width="80%">
    <tr valign="top">
        <!--#include virtual="sidebar.shtml" -->
		<td>
            <span class="header1"><a name="qsguide">Quick Start Guide</a></span>
			<br/>
			<p class="paratext">
				&#149;<b>Step 1</b>: Download BrowserLauncher2.jar from SourceForge.<br/>
				&#149;<b>Step 2</b>: Place BrowserLauncher2.jar in your classpath.<br/>
				&#149;<b>Step 3</b>: Create an instance of BrowserLauncher.<br/><code class="codetext">BrowserLauncher launcher = new BrowserLauncher();</code><br/>
				&#149;<b>Step 4</b>: Launch a browser with a url.<br/><code class="codetext">launcher.openURLinBrowser("http://www.google.com");</code>
			</p>
			<hr/>
            <span class="header1"><a name="files">Download Files</a></span>
			<br/><br/>
			<table border="1" cellpadding="2" cellspacing="2">
				<tr class="header2" valign="top">
					<td>File</td>
					<td>Description</td>
				</tr>
				<tr class="paratext" valign="top">
					<td>BrowserLauncher2.jar</td>
					<td>A small JAR file containing only the *.class files. This 
					is intended to be included in (distributed) client applications 
					that use BrowserLauncher2.</td>
				</tr>
				<tr class="paratext" valign="top">
					<td>BrowserLauncher2-all.jar</td>
					<td>A &ldquo;big&rdquo; JAR file again containing the class 
					files. Additionally, it includes the source, Javadoc API documentation, and 
					an application for testing the library. 
					This jar is intended to be used by developers that want to develop applications 
					that use BrowseLauncher2.</td>
				</tr>
			</table>
			<hr/>
            <span class="header1"><a name="testapp">Test Application</a></span>
			<br/>
			<p class="paratext">BrowserLauncher2-all.jar contains an application 
			for testing the library. To invoke the test application, enter the following 
			on a command line: <code class="codetext">java -jar BrowserLauncher2-all.jar</code>. The application
			contains a text field for entering urls (you will need to include the protocol) and
			a text area that records information about your environment and captures stack
			traces and logging information.</p>
			<hr/>
            <span class="header1"><a name="apinotes">API Notes</a></span>
			<br/>
			<p class="paratext">The preferred method for using the BrowserLauncher2 api is to
			create an instance of BrowserLauncher (<code class="codetext">edu.stanford.ejalbert.BrowserLauncher</code>) and
			invoke one of the openURLinBrowser methods:<br/>
			&#149;<code class="codetext">public void openURLinBrowser(String urlString)</code><br/>
			&#149;<code class="codetext">public void openURLinBrowser(String browser, String urlString)</code><br/>
			&#149;<code class="codetext">public void openURLinBrowser(List browsers, String urlString)</code><br/>
			The first method will invoke the user's default browser. The second and third methods are used for browser 
			targetting which is duscussed below.
			</p>

			<p class="paratext">If the application will be invoking urls often, the application should
			wrap the BrowserLauncher instance with a singleton or use some mechanism to cache it for reuse.
			BrowserLauncher performs some initialization when the object is created and it would be highly 
			inefficient to execute the initialization code every time a url is launched. There are three 
			constructors for creating a BrowserLauncher instance:<br/>
			&#149;<code class="codetext">public BrowserLauncher()</code><br/>
			&#149;<code class="codetext">public BrowserLauncher(AbstractLogger logger)</code><br/>
			&#149;<code class="codetext">public BrowserLauncher(AbstractLogger logger, BrowserLauncherErrorHandler errorHandler)</code><br/>
			The first method uses the default logger and default error handler. The default logger ignores 
			all logger messages. The default error handler will print a stack trace to the console if an 
			exception is encountered. The errorHandler is used to catch and handle exceptions when executing 
			the browser launch in a separate thread. Developers should extend AbstractLogger and 
			BrowserLauncherErrorHandler to fit their application's needs. Take a look at the source code for 
			the test application to see implementations of the logger and error handler interfaces.
			</p>

            <span class="header2"><a name="browsertargetting">Browser Targetting</a></span>
			<br/>
			<p class="paratext">Browser targetting provides an API for directing requests to a specific browser. This feature is fully supported on Unix/Linux and Windows but is not yet supported on Mac.</p>
			<p class="paratext">To use browser targetting, first call <code class="codetext">public List getBrowserList()</code> to retrieve a list of available browsers. Select a name from the list of browsers and pass it with the url in the call to <code class="codetext">public void openURLinBrowser(String browser, String urlString)</code>. Developers can also pass in a List of browser names. The browsers will be tried in order until one succeeds. If a browser targetting method fails, the library will fail over to the default launching method.</p>
            <span class="header2"><a name="logging">Logging</a></span>
			<br/>
			<p class="paratext">BrowserLauncher2 uses a subset of WrapLog 1.1 for logging. If you do not specify a logger instance, a default logger (NoneLogger) will be used. The default logger does not log anything.</p>
			<p class="paratext">For more information on using WrapLog, see <a href="http://sourceforge.net/projects/wraplog">http://sourceforge.net/projects/wraplog</a>.</p>
        </td>
    </tr>
</table>
</body>
</html>
